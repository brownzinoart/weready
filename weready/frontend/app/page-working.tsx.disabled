"use client";
import { useState } from "react";
import { CheckCircle, AlertTriangle, XCircle, Github, Award, TrendingUp, Users, Star, ArrowRight } from "lucide-react";

export default function Home() {
  const [inputMode, setInputMode] = useState<"code" | "repo">("repo");
  const [code, setCode] = useState("");
  const [repoUrl, setRepoUrl] = useState("");
  const [scanning, setScanning] = useState(false);
  const [result, setResult] = useState<any>(null);

  const scanCode = async () => {
    if (inputMode === "code" && !code) return;
    if (inputMode === "repo" && !repoUrl) return;

    setScanning(true);
    
    try {
      const requestBody = inputMode === "code" 
        ? { code, language: "python" }
        : { repo_url: repoUrl, language: "python" };
        
      const response = await fetch("http://localhost:3001/scan/brain", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(requestBody),
      });
      const data = await response.json();
      setResult(data);
    } catch (error) {
      console.error("Scan failed:", error);
      setResult({
        verdict: "ERROR",
        action_required: "Analysis failed. Please try again or use manual code input.",
        hallucinated_packages: []
      });
    }
    setScanning(false);
  };

  const isValidInput = inputMode === "code" ? code.trim() : repoUrl.trim();

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-100">
      {/* Navigation */}
      <nav className="border-b border-slate-200 bg-white/80 backdrop-blur-sm sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-3">
                <div className="w-8 h-8 bg-gradient-to-r from-violet-600 to-purple-600 rounded-lg flex items-center justify-center">
                  <Award className="w-5 h-5 text-white" />
                </div>
                <span className="text-xl font-bold bg-gradient-to-r from-violet-600 to-purple-600 bg-clip-text text-transparent">
                  WeReady
                </span>
              </div>
            </div>
          </div>
        </div>
      </nav>

      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Hero Section */}
        <div className="text-center py-16">
          <h1 className="text-5xl md:text-7xl font-bold mb-6">
            <span className="bg-gradient-to-r from-slate-900 to-slate-700 bg-clip-text text-transparent">
              Get Your
            </span>
            <br />
            <span className="bg-gradient-to-r from-violet-600 to-purple-600 bg-clip-text text-transparent">
              WeReady Score
            </span>
          </h1>
          
          <p className="text-xl md:text-2xl text-slate-600 mb-4 max-w-3xl mx-auto leading-relaxed">
            Don't let technical hiccups kill your startup. Get actionable guidance to ship confidently.
          </p>
        </div>

        {/* Input Section */}
        <div className="relative bg-gradient-to-br from-violet-50 via-white to-purple-50 rounded-3xl shadow-2xl border-2 border-violet-200 p-10 mb-12">
          <div className="relative text-center mb-10">
            <h2 className="text-3xl md:text-4xl font-bold bg-gradient-to-r from-violet-900 to-purple-900 bg-clip-text text-transparent mb-3">
              Analyze Your Startup
            </h2>
            <p className="text-lg text-slate-600 max-w-lg mx-auto">
              Get your comprehensive readiness score across code quality, business model, and investment potential
            </p>
          </div>

          {/* Input Mode Toggle */}
          <div className="relative flex justify-center mb-8">
            <div className="bg-white/80 backdrop-blur-sm rounded-2xl p-1.5 flex shadow-lg border border-violet-200">
              <button
                onClick={() => setInputMode("repo")}
                className={`px-8 py-4 rounded-xl font-semibold transition-all flex items-center space-x-3 ${
                  inputMode === "repo"
                    ? "bg-gradient-to-r from-violet-600 to-purple-600 text-white shadow-lg transform scale-105"
                    : "text-slate-600 hover:text-slate-900 hover:bg-slate-50"
                }`}
              >
                <Github className="w-5 h-5" />
                <span>GitHub Repository</span>
              </button>
              <button
                onClick={() => setInputMode("code")}
                className={`px-8 py-4 rounded-xl font-semibold transition-all flex items-center space-x-3 ${
                  inputMode === "code"
                    ? "bg-gradient-to-r from-violet-600 to-purple-600 text-white shadow-lg transform scale-105"
                    : "text-slate-600 hover:text-slate-900 hover:bg-slate-50"
                }`}
              >
                <span>Manual Code</span>
              </button>
            </div>
          </div>

          {inputMode === "repo" ? (
            <div className="relative max-w-2xl mx-auto">
              <label className="block text-sm font-semibold text-slate-700 mb-4">
                Repository URL
              </label>
              <div className="relative">
                <input
                  type="url"
                  className="w-full bg-white/80 backdrop-blur-sm border-2 border-violet-200 rounded-2xl px-6 py-5 text-slate-900 placeholder-slate-500 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-400 transition-all text-lg shadow-lg"
                  placeholder="https://github.com/username/repository"
                  value={repoUrl}
                  onChange={(e) => setRepoUrl(e.target.value)}
                />
                <Github className="absolute right-6 top-5 w-6 h-6 text-violet-400" />
              </div>
            </div>
          ) : (
            <div className="relative max-w-2xl mx-auto">
              <label className="block text-sm font-semibold text-slate-700 mb-4">
                Paste Your Code
              </label>
              <textarea
                className="w-full h-48 bg-white/80 backdrop-blur-sm border-2 border-violet-200 rounded-2xl px-6 py-5 text-slate-900 placeholder-slate-500 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-400 transition-all font-mono text-sm shadow-lg"
                placeholder="Paste your AI-generated code here..."
                value={code}
                onChange={(e) => setCode(e.target.value)}
              />
            </div>
          )}

          <div className="relative max-w-2xl mx-auto mt-10">
            <button
              onClick={scanCode}
              disabled={!isValidInput || scanning}
              className="relative w-full bg-gradient-to-r from-violet-600 via-purple-600 to-violet-700 hover:from-violet-700 hover:via-purple-700 hover:to-violet-800 text-white font-bold py-6 px-8 rounded-2xl disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 shadow-2xl hover:shadow-violet-500/25 flex items-center justify-center space-x-3"
            >
              {scanning ? (
                <>
                  <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-white"></div>
                  <span className="text-lg">Running WeReady Analysis...</span>
                </>
              ) : (
                <>
                  <span className="text-lg">üöÄ WeReady Analysis</span>
                  <ArrowRight className="w-6 h-6" />
                </>
              )}
            </button>
          </div>
        </div>

        {/* Results Section */}
        {result && (
          <div className="bg-white rounded-2xl shadow-xl border border-slate-200 p-8 mb-8">
            <div className="text-center mb-8">
              <div className="text-7xl font-bold mb-2 text-violet-600">
                {result.overall_score || 0}
                <span className="text-3xl text-slate-500">/100</span>
              </div>
              <div className="text-xl font-semibold text-slate-900">
                WeReady Score
              </div>
              <div className="text-lg text-slate-700 mb-2">
                {result.verdict === "ready_to_ship" ? "üöÄ Ready to Ship" :
                 result.verdict === "needs_work" ? "üìà Development Stage" :
                 result.verdict === "critical_issues" ? "üõ†Ô∏è Pre-Launch Review" :
                 "‚ö†Ô∏è Major Issues Found"}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}